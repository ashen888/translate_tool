django高级扩展
静态文件  css js 图片 json

中间件
一个轻量级 底层的插件 可以介入Django的请求和响应
本质 一个python类

这个类的方法
__init__ 不需要传参数 服务器响应第一个请求的时候自动调用 用户确定是否启用该中间件

process_request(self,request)  在执行视图之前被调用(分配url匹配视图之前) 每个请求上都会调用
返回None或者HttpResponse对象

process_view(self,request,view_func,view_args,view_kwargs) 调用视图之前执行 每个请求都会调用

process_template_response(self,request,response)  在视图刚好执行完后调用 每个请求都会调用
使用render

process_response(self,request,response) 所有响应返回浏览器之前调用 每个请求都会调用

process_exception(self,request,)  当视图抛出异常时调用

自定义中间件
middleware目录下 创建my_app目录
创建一个python文件

使用自定义中间件
需要配置setting文件

上传图片
概述 文件上传时 文件数据存储在request.FILES属性中
存储路径 在static目录下创建upfile目录用于存储接收上传的文件
配置settings文件
form表单上传文件要加enctype
上传文件必须是post请求

分页
paginator对象
创建对象  格式  Paginator{列表 整数}
返回值 返回的分页对象

属性
count 对象总数
num_pages  页面总数
page_range 页码列表  [1,2,3,4,5]

方法
page(num)  获得一个page对象 如果提供的页码不存在会抛出异常

异常
invaildpage 当向page传递的是一个无效的页码
pagenotaninteger  当给page不是一个整数
emptypage  当前page传递一个有效值 但该页面没数据

page对象
创建对象  paginator对象的page方法返回得到page对象
不需要手动创建
属性 object_list  当前页上所有的数据列表
number  当前页的页码值
paginator  当前page对象关联的paginator对象

方法
has_next  是否有下一页  有就返回True
has_previous  是否有上一页
has_other_pages  是否有上一页或下一页
has_page_number 返回下一页的页码  如果下一页不存在 抛出异常
previous_page_number 返回上一页的页码  如果下一页不存在 抛出异常
len  反向当前页的数据(对象)个数

ajax
网页需要动态生成  请求JSON数据

富文本
pip install django-tinymce
在站点中使用
 配置setting文件
 创建一个模型类
 配置站点

在自定义视图中使用  这个用的多点

celery
问题 用户发起请求 并且要等待响应返回 但是在视图中有一些耗时的操作
导致用户可能会等待很长时间才能接受响应 这样用户体验很差
网站每隔一段时间要同步一次数据 但是http请求是需要触发的

解决 将耗时的操作放到celery中执行
使用celery定时执行
先配置setting
celery 任务task  本质是一个python函数 将耗时操作封装成一个函数
在应用目录下创建task文件
迁移文件python manage.py migrate
在工程目录下的__init__文件添加几句代码
队列queue   将要执行的任务放队列里

工人worker   负责执行队列中的任务
代理broker   负责调度 在部署环境中使用redis

安装celery


