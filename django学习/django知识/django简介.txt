#!/usr/bin/env python
# -*- coding:utf-8 -*-

Django系统
环境
    python3.6
    django1.8
中文教程 http://python.usyiyi.com.cn/translate/django_182/index.html
django架站的16堂课
环境搭建
    anaconda+pycharm
    anaconda的使用
        conda list  显示当前环境安装的包
        conda env list 显示安装的虚拟环境列表
        conda create -n env_name python=3.6 创建一个虚拟环境
        激活conda的虚拟环境
            linux source activate env_name
            windows  activate env_name
        pip install django=1.8

后台需要的流程

解包(理解浏览器发来请求的意思)  ---> 业务处理views
---> models(跟数据库交流的东西) -->Template(网页) --> 反馈结果

中间层  --->  路由  --- >  处理模块(view视图)  <---- models
中间层

命令行启动
django-admin startproject xxx
cd xxx
开启django服务器
python manage.py runserver

pycharm启动
    需要配置

路由系统   urls

django 没有真正做事的哪个文件  要在外创建
创建app   这个就是具体做事的哪个人
    app:  负责一个具体业务或者一类具体业务的模块
    python manage.py startapp ashen

路由
    按照具体的请求url 导入到响应的业务处理模块的一个功能模块
    django的信息控制中枢
    本质上是接受的URL和相应的处理模块的一个映射  键和值
    www.baidu.com/   ------------------>>  do_index()
                (路由)
    www.baidu.com/search ------------->>  do_search()
    在接受URL请求的匹配上使用了RE
    URL的具体格式 urls.py中所示
用git  发到github上去  git到push

需要关注两点:
1 接受的URL是什么  即如何用RE对象对传入URL进行匹配
2 已知URL  匹配到哪个处理模块  用哪个函数来处理这个URL

1 URL匹配规则
    从上往下一个一个比对
    url格式是分级格式 则按照级别一级一级往下比对 主要对应url包含子url的情况
    子url一旦被调用 则不会返回主url了 要么向下处理好了 要么报错
        '/one/two/three/'
    正则以r开头 表示不需要转义 注意尖号^ 和 美元符号 $
    配对 r'^one/'  以one开头的url  开头不需要反斜杠
    配对 r'three/$' 以three/结尾的url
    如果从上向下都没有找到合适的匹配内容 则报错

2 正常映射
    把某一个符合RE的URL映射到处理函数中去
    from showeast import views as sv
    urlpatterns = [
        url(r'^admin/',admin.site.urls)
        url(r'^normalmap',sv.normalmap)
    ]

3 URL中带参数映射
在事件处理代码中需要由URL传入参数 形如 /myurl/params中的params
参数都是字符串形式 如果需要整数等形式需要自动转换
通常的形式如下
    /search/page/432 中的432需要经常转换 所以设置成参数比较合适

4 URL在app中处理
    如果所有应用URL都集中ashen_dj/urls.py中 可能导致文件的臃肿
    可以把urls具体功能逐渐分散到每个app中
        从django.conf.urls 导入include
        注意此时RE部分的写法
        添加include导入
    同样可以使用参数
使用方法
    确保include被导入
    写主路由的开头url
    写子路由
    编写views视图函数

5 URL中的嵌套参数
捕获某个参数的一部分
例如URL /index/page=3  要捕获数字3作为参数
url(r'^web/(?:page=(?P<pn>\d+)/)$',tv.do_param2)
?: 表示忽略此参数

6 传递额外参数
参数不仅仅来自URL 还可以是我们自己定义的内容
    url(r'exam',tv.exam,{"name":"yp"}),
附加参数通用适用于include语句 此时对include内所有都添加

7 URL的反向解析
防止硬编码
本质上是对每一个URL进行命名
以后再编码代码中使用URL的值  原则上都应该使用反向解析

views 视图
1 视图概述
    视图即视图函数  接受web请求并返回web相应的事物处理函数
    响应指符合http协议要求的任何内容 包括json string html等
    本章忽略事务处理 重点在如何返回处理结果上

2 其他简单视图
    django.http给我们提供类很多和HttpResponse类似的简单试图
    通过查看django.http代码就可以知道
    此类视图使用方法基本类似 可以通过return语句直接反馈 给浏览器
    Http404为exception  raise来获得

3 HttpResponse详解
方法
    init 使用页内容实例化HttpResponse对象
    write(content)  以文件的方式写
    flust()   以文件的方式输出缓存区
    set_cookie(key,value='',max_age=None,expires=None) 设置Cookie
        key,value都是字符串类型
        max_age是一个整数 表示在指定秒数后过期
        expires 是一个datetime或timedelta对象 会话将在这个指定的日期/时间过期
        max_age与expires二选一
        如果不指定过期时间 则两个星期后过期
    delete_cookie(key)  删除指定的key的Cookie 如果key不存在则什么也不发生

4 HttpResponseRedirect
    重定向 服务器端跳转
    构造函数的第一个参数用来指定重定向的地址

5 Request对象
Request介绍
    服务器接收到http协议的请求后 会根据报文创建HttpRequest对象
    视图函数的第一个参数是HttpRequest对象
    在django.http模块中定义了HttpRequest对象的API
属性
    下面除非特别说明 属性都是只读的
    path 一个字符串 表示请求的页面的完整路径 不包含域名
    method 一个字符串 表示请求使用的HTTP方法 常用值包括 'GET' 'POST'
    encoding 一个字符串 表示提交的数据的编码方式
        如果为None则表示使用浏览器的默认设置 一般为utf-8
        这个属性是可写的 可以通过修改它来修改访问表单数据使用的编码
    GET 一个类似字典的对象 包含get请求方式的所有参数
    POST 一个类似字典的对象 包含post请求方式的所有参数
    FILES 一个类似字典的对象 包含所有的上传文件
    COOKIES 一个标准的python字典 包含所有的cookie 键和值
    session 一个即可读又可写的类似字典的对象 表示当前的会话
        只有当Django启用会话的支持 才可用
        状态保持

    方法
        is_ajax() 如果请求是通过XMLhttpRequest发起的 则返回True
    QueryDict对象  query 查询
        定义在django.http.QueryDict
        request对象的属性GET POST都是QueryDict类型的对象
        与python字典不同 QueryDict类型的对象用来处理同一个键带有多个值的情况
        方法get() 根据键获取值
            只能获取键的一个值
            如果一个键同时拥有多个值 获取最后一个值
        方法getlist() 根据键获取值
            将键的值以列表返回 可以获取一个键的多个值

    GET属性
        QueryDict类型的对象
        包含get请求方式的所有参数
        与url请求地址中的参数对应 位于？后面
        参数的格式是键值对 如key1 = value1
        多个参数之间 使用&连接 如key1=value1&key2=value2

    POST属性
        QueryDict类型的对象
        包含post请求方式的所有参数
        与form表单中的控件对应
        表单中控件必须有name属性 name为键 value为值
            checkbox存在一键多值的问题
        键是开发人员定下来的 值是可变的

手动编写视图
    实验目的
        利用django快捷函数手动编写视图处理函数
        编写过程中理解视图运行原理
    分析
        django把所有请求信息装入request
        django通过urls模块把相应请求跟事件处理函数链接起来
        并把request作为参数传入
        在相应的处理函数中 我们需要完成两部分
            处理业务
            把结果封装并返回 我们可以使用简单HttpResponse

    render(request,tmeplate_name[,content])
        使用模板何一个给定的上下文环境 返回一个渲染和HttpResponse对象
        request django的传入请求
        template_name  模板名称
        content_instance 上下文环境
    render_to_response 用的少了 功能用法和render一样
        根据给定的上下文字典渲染给定模板  返回渲染后的HttpResponse

系统内建视图
    系统内建视图 可以直接使用
基于类的视图
    用面向对象来写views视图函数

Models 模型  转接口
ORM
    ObjectRelationMap  把面向对象思想转换成关系数据库
    类对应表格
    类中的属性对应表中的字段
    所有需要使用ORM的class都必须是 models.Model的子类
    class中的所有属性对应表格中的字段
    字段的类型都必须使用modles.xx
    在django中 Models负责跟数据库交互
django链接数据库
        关系型数据库
    自带默认数据库sql ite3
        轻量级
    建议开发用sqlite3 部署用mysql之类数据库
    切换数据库在settings中进行设置
    需要在项目文件下的__init__文件中导入pymongo包

models类的使用
定义和数据库表映射的类
    在应用中的models.py文件中定义class
    所有需要使用ORM的calss都必须是models.Model的子类
    class中的所有属性对应表格中的字段
    字段的类型都必须使用models.xxx 不用使用python中的类型
字段常用参数
    max_length 规定数值的最大长度
    blank  是否允许字段为空 默认不允许
    null 在db中控制是否保存为null 默认为false
    default 默认值
    unique 唯一
    verbose_name 假名

数据库的迁移
1 在命令行中 生成数据迁移的语句(生产sql语句)
    python3 manage.py makemigrations
2 在命令行 输入数据迁移的指令
    python3 manage.py migrate  迁移
如果迁移中出现没有变化或者报错 可以尝试强制迁移
强制迁移命令
python3 manage.py makemigrations app名
python3 manage.py migrate  app名
3 对于默认数据库 为了避免混乱 如果数据库中没有数据 每次迁移前可以把数据库删掉

查看数据库的数据
1 启动命令行 python manage.py shell
对ORM的操作分为静态函数和非静态函数两种 静态时指内存中只有一个
2 在命令行中导入对应的映射类
    from 应用.models import 类名
3 使用objects 属性 操作数据库 objects是模型中实际和数据库进行交互的
4 查询命令
    类名.objects.all() 查询数据库表中的所有内容 返回结果是一个Query
    类名.objects.filter(条件)

通用查找格式 属性名 __ 下面的内容 = 值
age__lt = 18
年龄小于18
1 lt 小于
gt 大于
gte 大于等于
range 范围
year 年份
isnull 是否为空

2 查找等于指定值的格式  属性名= 值
3 模糊查找 属性名 __ 下面的内容 = 值
iexact 不区分大小写
exact 精确等于
contains 包含
startwith 以..开头
endwith 以..结尾

数据库表关系
多表联查 利用多个表联合查找某一项信息或者多项信息
1 OneToOne
    建立关系 在模型任意一边即可 使用OneTOoneField
    add
        添加没有关系的一边 直接实例化保存就可以
        s = School()
        s.school_id = 1
        s.school_name = "xxx"
        s.save()

        添加有关系的一边 使用create方法 或者使用实例化然后save
        m = Manager()
        m.manager_id = 10
        m.manager_name = "yp"
        m.save()

        m = Manager.objects.create(manager_id=10,manager_name="yp",my_school=ss[0])
    query:
        由子表查母表  子表的属性直接提取信息
        my_school = models.OneToOneField(School)
        这个my_school是School的一个对象 他的名字 就是school的名字
        m.my_school.school_name
        由母表查子表 使用双下划线
    change:
        单个修改用save
        批量修改用update
    delete
        直接使用delete函数删除

2 OneTOMore
    一个表格的一个数据项/对象等 可以由很多个另一个表格的数据项
    比如 一个学校可以由很多个老师 但一个老师只能在一个学校里上班
    使用上
        使用ForengnKey
        在多的那一边 比如上边的例子就是在Teacher的表格里进行定义
    Add
        跟一对一方法类似 通过create和new来添加
        create 把属性都填满 然后不需要手动保存
        new 可以属性或者参数为空 必须用save保存
    Query
        以学校和老师的例子为准
        如果知道老师 查学校 则通过增加的关系属性 直接使用
        查找t1老师是哪个学校的
        反查
            有学校 我想查下这个学校所有老师 则需要在老师模型名称的小写下直接加下划线set
            用来表示

3 MoreToMore
    表示任意一个表的数据可以拥有对方表格多项数据 反之亦然
    比如 典型例子就是老师和学生的关系
    使用上 在任意一方 使用ManyToMany定义 只需要定义一边
    Add:
        添加老师 则在student.teachers.add()
    Query:
        跟一对多类似 使用student_set查询

模板系统
模板 一组相同或者相似的页面 在需要个性化的地方进行留白 需要的时候只是用数据填充就可以使用
步骤
    1 在settings中进行设置 TEMPLATE
    2 在template文件夹下编写模板并调用

模板变量
    变量的表示方法  {{var_name}}
    系统调用模板的时候 会有相应的数据查找相应的变量名称
    如果能找到 则填充 或者叫渲染 否则 跳过

模板标签
    for标签 {%for .. in .. %}
用法
{% for .. in .. %}
        循环语句
{% endfor %}

if标签
用来判断条件
{% if 条件 %}
    条件成立执行语句
{% elif 条件 %}
    条件成立执行语句
{% endif %}
    xxx

csrf标签
    csrf 跨站请求伪造
    一种常见的攻击方法
    在提交表单的时候 表单页面需要加上{% csrf_token %}
    django自动防护





